{{- include "common.values.setup" . }}

{{/* Append the hardcoded settings */}}
{{- define "tdarr.harcodedValues" -}}
{{ if .Values.node.enabled }}
additionalContainers:
  node:
    name: node
    image: "{{ .Values.node.image.repository }}:{{ .Values.node.image.tag }}"
    imagePullPolicy: {{ .Values.node.image.pullPolicy }}
    env:
      - name: TZ
        value: {{ default "UTC" .Values.env.TZ }}
      - name: nodeID
        value: {{ default "UTC" .Values.node.id }}
      - name: serverIP
        value: "localhost"
      - name: serverPort
        value: "{{ .Values.service.main.ports.server.port }}"
      - name: ffmpegPath
        value: {{ default "" .Values.env.ffmpegPath }}
    volumeMounts:
      {{ if .Values.persistence.config.enabled }}
      - name: config
        mountPath: /app/configs
      {{ end }}
      {{ if .Values.persistence.media.enabled }}
      - name: media
        mountPath: /media
      {{ end }}
      {{ if .Values.persistence.shared.enabled }}
      - name: shared
        mountPath: /shared
      {{ end }}
    {{- with .Values.node.resources }}
    resources:
      {{- toYaml . | nindent 6 }}
    {{- end }}
{{ end }}
{{- end -}}
{{- $_ := mergeOverwrite .Values (include "tdarr.harcodedValues" . | fromYaml) -}}

{{- define "hardcoded.affinity" -}}
{{ if .Values.nodes.enabled }}
podAntiAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
    - podAffinityTerm:
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: {{ .Values.nodes.nameOverride }}
            app.kubernetes.io/instance: {{ .Release.Name }}
            app.kubernetes.io/component: {{ include "common.names.fullname" . }}-node
        namespaces:
          - {{ .Release.Namespace }}
        topologyKey: kubernetes.io/hostname
      weight: 1
{{ end }}
{{- end -}}

{{/* Merge affinity with hardcoded.affinity */}}
{{- $affinity := mergeOverwrite (include "hardcoded.affinity" . | fromYaml) (default dict .Values.affinity) -}}
{{- $_ := set .Values "affinity" $affinity -}}

{{/* Render the templates */}}
{{ include "common.all" . }}

{{- define "hardcoded.nodes.affinity" -}}
podAntiAffinity:
  preferredDuringSchedulingIgnoredDuringExecution:
    - podAffinityTerm:
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: {{ include "common.names.name" . }}
            app.kubernetes.io/instance: {{ .Release.Name }}
            app.kubernetes.io/component: {{ include "common.names.fullname" . }}
        namespaces:
          - {{ .Release.Namespace }}
        topologyKey: kubernetes.io/hostname
      weight: 1
    - podAffinityTerm:
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: {{ .Values.nodes.nameOverride }}
            app.kubernetes.io/instance: {{ .Release.Name }}
            app.kubernetes.io/component: {{ include "common.names.fullname" . }}-node
        namespaces:
          - {{ .Release.Namespace }}
        topologyKey: kubernetes.io/hostname
      weight: 1
{{- end -}}

{{- define "hardcoded.nodes.env" -}}
TZ: {{ default "UTC" .Values.env.TZ }}
nodeID:
  valueFrom:
    fieldRef:
      fieldPath: metadata.name
serverIP: {{ include "common.names.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local
serverPort: {{ .Values.service.main.ports.server.port }}
nodeIP:
  valueFrom:
    fieldRef:
      fieldPath: status.podIP
nodePort: {{ .Values.nodes.service.main.ports.node.port }}
ffmpegPath: {{ default "" .Values.env.ffmpegPath }}
{{- end -}}

{{- define "hardcoded.nodes.initContainers" -}}
wait-for-server:
  image: owncloudci/wait-for
  command:
    - /usr/bin/wait-for
  args:
    - -it
    - {{ include "common.names.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.main.ports.server.port }}
{{- end -}}

{{- define "hardcoded.nodes" -}}
image:
  repository: {{ .Values.nodes.image.repository }}
  tag: {{ .Values.nodes.image.tag }}
  pullPolicy: {{ .Values.nodes.image.pullPolicy }}
podLabels:
  app.kubernetes.io/component: {{ include "common.names.fullname" . }}-node
controller:
  type: statefulset
{{- end -}}

{{ if .Values.nodes.enabled }}
  {{/* Merge nodes.affinity with hardcoded.nodes.affinity */}}
  {{- $affinity := mergeOverwrite (include "hardcoded.nodes.affinity" . | fromYaml) .Values.nodes.affinity -}}
  {{- $_ := set .Values "affinity" $affinity -}}

  {{/* Merge nodes.env with hardcoded.nodes.env */}}
  {{- $env := mergeOverwrite (include "hardcoded.nodes.env" . | fromYaml) (default dict .Values.nodes.env) -}}
  {{- $_ := set .Values "env" $env -}}

  {{/* Merge nodes.initContainers with hardcoded.nodes.initContainers */}}
  {{- $initContainers := mergeOverwrite (include "hardcoded.nodes.initContainers" . | fromYaml) (default dict .Values.nodes.initContainers) -}}
  {{- $_ := set .Values "initContainers" $initContainers -}}

  {{/* Merge hardcoded.nodes values */}}
  {{- $_ := mergeOverwrite .Values (include "hardcoded.nodes" . | fromYaml) -}}

  {{/* Set various nodes values */}}
  {{- $_ := set .Values.controller "annotations" .Values.nodes.annotations -}}
  {{- $_ := set .Values.controller "labels" .Values.nodes.labels -}}
  {{- $_ := set .Values.controller "podManagementPolicy" .Values.nodes.podManagementPolicy -}}
  {{- $_ := set .Values.controller "replicas" .Values.nodes.replicas -}}
  {{- $_ := set .Values.controller "strategy" .Values.nodes.strategy -}}

  {{- $_ := set .Values "additionalContainers" .Values.nodes.additionalContainers -}}
  {{- $_ := set .Values "nameOverride" .Values.nodes.nameOverride -}}
  {{- $_ := set .Values "persistence" .Values.nodes.persistence -}}
  {{- $_ := set .Values "probes" .Values.nodes.probes -}}
  {{- $_ := set .Values "resources" .Values.nodes.resources -}}
  {{- $_ := set .Values "rollingUpdate" .Values.nodes.rollingUpdate -}}
  {{- $_ := set .Values "service" .Values.nodes.service -}}
  {{- $_ := set .Values "volumeClaimTemplates" .Values.nodes.volumeClaimTemplates -}}

  {{/* Render the nodes PVC's */}}
  {{- include "common.pvc" . | nindent 0 }}

  {{/* Render the nodes Service */}}
  {{- include "common.service" . | nindent 0 }}

  {{/* Render the nodes StatefulSet */}}
  {{- include "common.statefulset" . | nindent 0 }}

{{- end }}
